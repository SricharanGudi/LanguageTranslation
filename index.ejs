<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Language Translation</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Sedan+SC&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
  <style>
    body {
      font-family: "Sedan SC", serif;
      font-weight: 400;
      font-style: normal;
  
  margin-right: 450px;
  margin-left: 0px;
      background-color: #c9d6ff;
      background: linear-gradient(to right, #e2e2e2, #c9d6ff);
      margin: 0;
      padding: 0;
    }
    
    #main {
      display: flex;
      justify-content: center;
      align-items: flex-start;
      max-width: 700px;
      margin: 20px auto;
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    
    #speechText,
    #convertedText {
      margin-bottom: 20px;
    }
    #speechText {
        margin-right: 20px;
    }
    
    #convertedText {
        margin-left: 20px;
    }
    select,
    textarea {
      display: inline-block;
      margin-bottom: 10px;
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box;
    }
    textarea{
        width: 305px;
      height: 165px;
    }
    
    button {
      background-color: #512da8;
      color: white;
      border: none;
      cursor: pointer;
      
    }
    #SpeechButton{
      display: inline-block;
      margin-bottom: 10px;
      
      padding: 10px;
      padding-top: 15px;
      border: 1px solid #ccc;
      box-sizing: border-box;
      border-radius: 50%;
      width:50px;
        
        margin-right: 60%;
        margin-left: 2%;
    }
    #speech{
        display: inline-block;
      margin-bottom: 10px;
      width: 100%;
      padding: 10px;
      padding-top: 15px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box;
        border-radius: 50%;
        width:50px;
        margin-left: 2%;
        margin-right: 60%;
    }
    #inputButton{
        display: inline-block;
      margin-bottom: 10px;
      width: 100%;
      padding: 10px;
      padding-top: 15px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box;
        border-radius: 50%;
        width:50px;
    
    }
    #fileupload{
        display: inline-block;
      margin-bottom: 10px;
      width: 100%;
      padding: 10px;
      padding-top: 15px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box;
        border-radius: 50%;
        width:50px;
    }
    button:hover {
      background-color: #202124;
    }
    
    input[type="file"] {
      display: none;
    }
    
    label {
      font-weight: bold;
    }
    
    #compare_arrows{
    text-align: center;
    margin-left: 0px;
    margin-top: 35px;
    padding-right: 10px;
    }
    
    /* Styling for select dropdown arrow */
    select {
      appearance: none;
      -moz-appearance: none;
      -webkit-appearance: none;
      background-image: url('data:image/svg+xml;utf8,<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M7 10l5 5 5-5z"/><path d="M0 0h24v24H0z" fill="none"/></svg>');
      background-position: right 10px center;
      background-repeat: no-repeat;
      background-size: 24px;
    }
    
    /* Styling for select dropdown */
    select::-ms-expand {
      display: none;
    }
    header{
      background-color: #512da8;
      border-bottom-left-radius: 20px;
      border-bottom-right-radius: 20px;
    }

    .sedan-sc-regular {
  font-family: "Sedan SC", serif;
  font-weight: 400;
  font-style: normal;
  color: #fff;
  margin-right: 450px;
  margin-left: 0px;
}


    
</style>
</head>
<body>
    <header class="d-flex justify-content-center py-3 ">
      
      <ul class="nav nav-pills">
        <h1 class="sedan-sc-regular">Language translate</h1>
        <li class="extra" class="nav-item"><a href="#" class="nav-link px-2 text-white" aria-current="page">Home</a></li>
       
        <li class="extra1" class="nav-item"><a href="#" class="nav-link px-2 text-white">About</a></li>
      </ul>
    </header>
    <div id="main">
    
        <div id="speechText">
            <label for="sourceLanguage">Select Language:</label>
            <select id="languageSelect1" name="Languagecode">
                <% languages.forEach(lang => { %>
                    <option value="<%= lang.code %>"><%= lang.name %></option>
                <% }); %>
            </select>
            <textarea  id="input" placeholder="Enter here"></textarea>
            <button id="SpeechButton" ><span class="material-symbols-outlined">
                mic
                </span></button>
            <button id="inputButton" ><span class="material-symbols-outlined">
                translate
                </span></button>
        </div>
        <div id="compare_arrows"><span class="material-symbols-outlined">
            compare_arrows
            </span>
        </div>
        <div id="convertedText">
            <label for="destinationLanguage">Select Language:</label>
        <select id="languageSelect2" name="Languagecode">
            <% languages.forEach(lang => { %>
                <option value="<%= lang.code %>"><%= lang.name %></option>
            <% }); %>
        </select>
            <textarea id="output" placeholder="output"></textarea>
            <button id="speech"><span class="material-symbols-outlined">
                volume_up
                </span></button>
            <input type="file" id="fileInput_n" style="display: none;" accept=".pdf, .jpg, .jpeg, .png">
            <input name="pdfFile" type="file" id="fileInput" style="display: none;" accept=".pdf, .jpg, .jpeg, .png">
            <button id="fileupload"><span class="material-symbols-outlined">
                upload_file
                </span></button>
        </div>
    </div>

  <script src="//cdnjs.cloudflare.com/ajax/libs/annyang/2.6.1/annyang.min.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/SpeechKITT/0.3.0/speechkitt.min.js"></script>
  
  

  <script >

    const translatedKeywords = {
    'language': 'send',
    'idioma': 'send', // Spanish
    'Sprache': 'send', // German
    'langue': 'send', // French
    'linguaggio': 'send', // Italian
    'لغة': 'send', // Arabic
    'լեզվաբառ': 'send', // Armenian
    'dil': 'send', // Azerbaijani
    'hizkuntza': 'send', // Basque
    'мова': 'send', // Belarusian
    'език': 'send', // Bulgarian
    'llengua': 'send', // Catalan
    '语言': 'send', // Chinese (Simplified)
    '語言': 'send', // Chinese (Traditional)
    'jezik': 'send', // Croatian
    'jazyk': 'send', // Czech
    'sprog': 'send', // Danish
    'taal': 'send', // Dutch
    'keel': 'send', // Estonian
    'wika': 'send', // Filipino
    'kieli': 'send', // Finnish
    'langue': 'send', // French
    'hizkuntza': 'send', // Galician
    'ენა': 'send', // Georgian
    'Sprache': 'send', // German
    'γλώσσα': 'send', // Greek
    'lang': 'send', // Haitian Creole
    'שפה': 'send', // Hebrew
    'भाषा': 'send', // Hindi
    'nyelv': 'send', // Hungarian
    'tungumál': 'send', // Icelandic
    'bahasa': 'send', // Indonesian
    'teanga': 'send', // Irish
    'lingua': 'send', // Italian
    '言語': 'send', // Japanese
    '언어': 'send', // Korean
    'valoda': 'send', // Latvian
    'kalba': 'send', // Lithuanian
    'јазик': 'send', // Macedonian
    'bahasa': 'send', // Malay
    'ilsien': 'send', // Maltese
    'språk': 'send', // Norwegian
    'زبان': 'send', // Persian
    'język': 'send', // Polish
    'idioma': 'send', // Portuguese
    'limba': 'send', // Romanian
    'язык': 'send', // Russian
    'језик': 'send', // Serbian
    'jazyk': 'send', // Slovak
    'jezik': 'send', // Slovenian
    'idioma': 'send', // Spanish
    'lugha': 'send', // Swahili
    'språk': 'send', // Swedish
    'ภาษา': 'send', // Thai
    'dil': 'send', // Turkish
    'мова': 'send', // Ukrainian
    'زبان': 'send', // Urdu
    'ngôn ngữ': 'send', // Vietnamese
    'iaith': 'send', // Welsh
    'שפראך': 'send', // Yiddish
    'மொழி': 'send', // Tamil
    'భాష': 'send', // Telugu
    'ഭാഷ': 'send', // Malayalam
    'ಭಾಷೆ': 'send' ,// Kannada
    'upload file and change to':'send',
  };
  
  
  
    if (annyang) {
  
      annyang.debug(true);
  
      // Function to set language dynamically
      function setAnnyangLanguage(languageCode) {
          annyang.setLanguage(languageCode);
      }
  
      //annyang.addCallback('result', function(phrases) {
          // Get the last recognized phrase
         // const recognizedText = phrases[0];
          
          // Display the recognized text in the HTML element
          //document.getElementById('input').innerText = recognizedText;
     // });
  
      const initialLanguageCode = 'en-us'; // Default language code
      setAnnyangLanguage(initialLanguageCode);
  
      // Add commands to annyang
      var pendingText = '';
      var latelanguage='';
      var commands = {};
  
      Object.keys(translatedKeywords).forEach(translatedKeyword => {
        
              commands['*text ' + translatedKeyword + ' *language'] = function(text, language) {
                  if (pendingText) {
                      text = pendingText + ' ' + text; // Combine pending text and new text
                      pendingText = ''; // Clear pending text
                  }
                  var targetLanguage = language;
                  console.log('Sending text:', text);
                  console.log('Sending language:', targetLanguage);
                  sendData(text, targetLanguage);
              };
      commands[translatedKeyword + ' *language']= function(language){
      document.getElementById('fileInput').click();
      console.log('sending language :', language);
      latelanguage=language;
      //pdf(language);
    };
    });
  
  
  
      annyang.addCommands(commands);
      SpeechKITT.annyang();
  
      // Define a stylesheet for KITT to use
      SpeechKITT.setStylesheet('//cdnjs.cloudflare.com/ajax/libs/SpeechKITT/0.3.0/themes/flat-midnight-blue.css');
  
      // Render KITT's interface
      SpeechKITT.vroom();
    } else {
        console.error("Annyang not available. Speech recognition will not work.");
    }

    const fileUploadButton = document.getElementById('fileupload');
    const fileInput_n = document.getElementById('fileInput_n');
  fileUploadButton.addEventListener('click', () => {
    fileInput_n.click(); // Trigger the file input when the button is clicked

  });

  
document.getElementById('fileInput').addEventListener('change', function(e) {
      var file = e.target.files[0];
      if (file) {
          const formData = new FormData();
          formData.append("file", file); // Append the file to form data
  
          // Determine the type of file selected (PDF or image)
          const fileType = file.type;
          const isPDF = fileType === 'application/pdf';
          if (isPDF) {
          pdfdata(formData,latelanguage); // Send PDF data to server
          } else {
            imagedata(formData, latelanguage); // Send image data to server
          }
        console.log('Selected file:', formData);
        console.log('Selected latelanguage:', latelanguage);
        latelanguage='';
        
        // You can perform additional actions like uploading the file and changing the language
      } else {
        console.log('No file selected.');
      }
    });
    
  var selectedLanguage = document.getElementById('languageSelect2');
  
  // Add onchange event listener
  selectedLanguage.addEventListener("change", function() {
      // Code to execute when the dropdown selection changes
      var languageValue = selectedLanguage.value;
  });
  // Get the button element
  var translate = document.getElementById("inputButton");
  var speechs = document.getElementById("speech");
  // Add onclick event listener
  translate.addEventListener("click", function() {
      // Code to execute when the button is clicked
      var recognizedText = document.getElementById('input').value;
      var selectedLanguage = document.getElementById('languageSelect2');
      var languageValue = selectedLanguage.value;
      console.log(languageValue);
      console.log(recognizedText);
      sendData_n(recognizedText, languageValue);
  });

  document.getElementById('fileInput_n').addEventListener('change', function(e) {
      var file = e.target.files[0];
      var selectedLanguage = document.getElementById('languageSelect2');
      var languageValue = selectedLanguage.value;
      if (file) {
          const formData = new FormData();
          formData.append("file", file); // Append the file to form data
  
          // Determine the type of file selected (PDF or image)
          const fileType = file.type;
          const isPDF = fileType === 'application/pdf';
          if (isPDF) {
          pdfdata_n(formData,languageValue); // Send PDF data to server
          } else {
            imagedata_n(formData, languageValue); // Send image data to server
          }
        console.log('Selected file:', formData);
        console.log('Selected latelanguage:', languageValue);
        
        
        // You can perform additional actions like uploading the file and changing the language
      } else {
        console.log('No file selected.');
      }
    });
  var speak = document.getElementById('SpeechButton');
var inputTextArea = document.getElementById('input');
var languageSelect_n = document.getElementById('languageSelect1');

speak.addEventListener("click", function() {
  const recognition = new webkitSpeechRecognition() || SpeechRecognition(); // Initialize speech recognition

  // Get the selected language code from the dropdown
  const selectedLanguage = languageSelect_n.value;

  recognition.lang = selectedLanguage; // Set the selected language for speech recognition
  recognition.interimResults = true; // Enable interim results
  
  recognition.start(); // Start speech recognition
  
  recognition.onresult = (event) => {
    const transcript = Array.from(event.results)
      .map(result => result[0].transcript)
      .join('');

    inputTextArea.value = transcript; // Update the textarea with the recognized text
  };

  recognition.onerror = (event) => {
    console.error('Speech recognition error:', event.error);
  };
});

  speechs.addEventListener("click", function() {
      // Code to execute when the button is clicked
      var recognizedText = document.getElementById('output').value;
      var selectedLanguage = document.getElementById('languageSelect2');
      var languageValue = selectedLanguage.value;
      console.log(recognizedText);
      console.log(languageValue);
      speech(recognizedText, languageValue);
  });
  
  function speech(text,language) {
      fetch("/speech", {
          method: "POST",
          headers: {
              "Content-Type": "application/json"
          },
          body: JSON.stringify({ text: text , language: language })
      })
      .then(response => {
          if (!response.ok) {
              throw new Error('Network response was not ok');
          }
          return response.blob();
          // Check if the response content type is JSON
          const contentType = response.headers.get('content-type');
          if (contentType && contentType.includes('application/json')) {
              return response.json(); // Parse JSON response
          } else {
              return response.text(); // Return text response as is
          }
      })
      .then(blob => {
          const audioUrl = URL.createObjectURL(blob);
          const audio = new Audio(audioUrl);
          audio.play();
          
      })
      .catch(error => {
          console.error('There was a problem with the fetch operation:', error);
          // Handle error appropriately, e.g., display an error message to the user
      });
    }
  function sendData_n(text, language) {
      fetch("/usetext_n", {
          method: "POST",
          headers: {
              "Content-Type": "application/json"
          },
          body: JSON.stringify({ text: text , language: language })
      })
      .then(response => {
          if (!response.ok) {
              throw new Error('Network response was not ok');
          }
          // Check if the response content type is JSON
          const contentType = response.headers.get('content-type');
          if (contentType && contentType.includes('application/json')) {
              return response.json(); // Parse JSON response
          } else {
              return response.text(); // Return text response as is
          }
      })
      .then(data => {
          console.log('Server response:', data);
          document.getElementById('output').value = data;
      })
      .catch(error => {
          console.error('There was a problem with the fetch operation:', error);
          // Handle error appropriately, e.g., display an error message to the user
      });
    }
  
    function sendData(text, language) {
      fetch("/usetext", {
          method: "POST",
          headers: {
              "Content-Type": "application/json"
          },
          body: JSON.stringify({ text: text , language: language })
      })
      .then(response => {
          if (!response.ok) {
              throw new Error('Network response was not ok');
          }
          // Check if the response content type is JSON
          const contentType = response.headers.get('content-type');
          if (contentType && contentType.includes('application/json')) {
              return response.json(); // Parse JSON response
          } else {
              return response.text(); // Return text response as is
          }
      })
      .then(data => {
        console.log('Server response:', data);
          document.getElementById('output').value = data;
      })
      .catch(error => {
          console.error('There was a problem with the fetch operation:', error);
          // Handle error appropriately, e.g., display an error message to the user
      });
    }
  
    function pdfdata(formData, language) {
      // Fetch operation to send FormData and language to the server
      fetch('/usepdf', {
          method: 'POST',
          body: formData,
          headers: {
              'Accept': 'application/json',
              'Language': language // Optionally, include language as a custom header
          }
      })
      .then(response => {
          if (response.ok) {
              console.log('File and language data sent successfully.');
              // Handle response from server if needed
          } else {
              console.error('Failed to send file and language data.');
          }
          return respone.text()
      })
      .then(data => {
        console.log('Server response:', data);
          document.getElementById('output').value = data;
      })
      .catch(error => {
          console.error('Error:', error);
      });
  }
  
  function imagedata(formData, language) {
      fetch('/useimg', {
          method: 'POST',
          body: formData,
          headers: {
              'Accept': 'application/json',
              'Language': language
          }
      })
      .then(response => {
          if (response.ok) {
              console.log('Image file and language data sent successfully.');
          } else {
              console.error('Failed to send image file and language data.');
          }
          return response.text()
      })
      .then(data => {
        console.log('Server response:', data);
          document.getElementById('output').value = data;
      })
      .catch(error => {
          console.error('Error:', error);
      });
    }

    function pdfdata_n(formData, language) {
      // Fetch operation to send FormData and language to the server
      fetch('/usepdf_n', {
          method: 'POST',
          body: formData,
          headers: {
              'Accept': 'application/json',
              'Language': language // Optionally, include language as a custom header
          }
      })
      .then(response => {
          if (response.ok) {
              console.log('File and language data sent successfully.');
              // Handle response from server if needed
          } else {
              console.error('Failed to send file and language data.');
          }
          return response.text();
      })
      .then(data => {
        console.log('Server response:', data);
          document.getElementById('output').value = data;
      })
      
      .catch(error => {
          console.error('Error:', error);
      });
  }
  
  function imagedata_n(formData, language) {
      fetch('/useimg_n', {
          method: 'POST',
          body: formData,
          headers: {
              'Accept': 'application/json',
              'Language': language
          }
      })
      .then(response => {
          if (response.ok) {
              console.log('Image file and language data sent successfully.');
          } else {
              console.error('Failed to send image file and language data.');
          }
          return response.text();
      })
      .then(data => {
        console.log('Server response:', data);
          document.getElementById('output').value = data;
      })
      .catch(error => {
          console.error('Error:', error);
      });
    }
  
    const languageSelect = document.getElementById('languageSelect1');
    languageSelect.addEventListener('change', function() {
        const selectedLanguageCode = languageSelect.value;
        setAnnyangLanguage(selectedLanguageCode);
    });</script>
</html>
